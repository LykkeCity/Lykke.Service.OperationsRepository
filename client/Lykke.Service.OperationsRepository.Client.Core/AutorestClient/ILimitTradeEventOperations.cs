// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.OperationsRepository.AutorestClient
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// LimitTradeEventOperations operations.
    /// </summary>
    public partial interface ILimitTradeEventOperations
    {
        /// <param name='type'>
        /// Possible values include: 'Buy', 'Sell'
        /// </param>
        /// <param name='volume'>
        /// </param>
        /// <param name='price'>
        /// </param>
        /// <param name='status'>
        /// Possible values include: 'InOrderBook', 'Processing', 'Matched',
        /// 'NotEnoughFunds', 'ReservedVolumeGreaterThanBalance',
        /// 'NoLiquidity', 'UnknownAsset', 'Dust', 'Cancelled',
        /// 'LeadToNegativeSpread'
        /// </param>
        /// <param name='dateTime'>
        /// </param>
        /// <param name='orderId'>
        /// </param>
        /// <param name='clientId'>
        /// </param>
        /// <param name='assetId'>
        /// </param>
        /// <param name='assetPair'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> CreateEventWithHttpMessagesAsync(OrderType type, double volume, double price, OrderStatus status, System.DateTime dateTime, string orderId = default(string), string clientId = default(string), string assetId = default(string), string assetPair = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <param name='clientId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> GetEventsWithHttpMessagesAsync(string clientId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
