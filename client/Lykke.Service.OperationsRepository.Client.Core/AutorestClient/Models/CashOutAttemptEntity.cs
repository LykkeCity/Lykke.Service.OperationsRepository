// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.OperationsRepository.AutorestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class CashOutAttemptEntity
    {
        /// <summary>
        /// Initializes a new instance of the CashOutAttemptEntity class.
        /// </summary>
        public CashOutAttemptEntity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CashOutAttemptEntity class.
        /// </summary>
        /// <param name="status">Possible values include: 'Pending',
        /// 'Confirmed', 'Declined', 'Processed', 'ClientConfirmation',
        /// 'CanceledByClient', 'CanceledByTimeout', 'RequestForDocs'</param>
        /// <param name="state">Possible values include: 'InProcessOnchain',
        /// 'SettledOnchain', 'InProcessOffchain', 'SettledOffchain',
        /// 'SettledNoChain'</param>
        /// <param name="volumeSize">Possible values include: 'Unknown',
        /// 'High', 'Low'</param>
        /// <param name="feeType">Possible values include: 'Unknown',
        /// 'Absolute', 'Relative'</param>
        public CashOutAttemptEntity(string id, string clientId, string assetId, string paymentSystem, string paymentFields, string blockchainHash, string tradeSystem, string accountId, CashOutRequestStatus status, TransactionStates state, double amount, System.DateTime dateTime, bool isHidden, int statusVal, int stateVal, CashOutVolumeSize volumeSize, string volumeText, string previousId, double feeSize, FeeType feeType, string feeTypeText, string partitionKey, string rowKey, System.DateTime timestamp, string eTag)
        {
            Id = id;
            ClientId = clientId;
            AssetId = assetId;
            PaymentSystem = paymentSystem;
            PaymentFields = paymentFields;
            BlockchainHash = blockchainHash;
            TradeSystem = tradeSystem;
            AccountId = accountId;
            Status = status;
            State = state;
            Amount = amount;
            DateTime = dateTime;
            IsHidden = isHidden;
            StatusVal = statusVal;
            StateVal = stateVal;
            VolumeSize = volumeSize;
            VolumeText = volumeText;
            PreviousId = previousId;
            FeeSize = feeSize;
            FeeType = feeType;
            FeeTypeText = feeTypeText;
            PartitionKey = partitionKey;
            RowKey = rowKey;
            Timestamp = timestamp;
            ETag = eTag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ClientId")]
        public string ClientId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AssetId")]
        public string AssetId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PaymentSystem")]
        public string PaymentSystem { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PaymentFields")]
        public string PaymentFields { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockchainHash")]
        public string BlockchainHash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TradeSystem")]
        public string TradeSystem { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AccountId")]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Pending', 'Confirmed',
        /// 'Declined', 'Processed', 'ClientConfirmation', 'CanceledByClient',
        /// 'CanceledByTimeout', 'RequestForDocs'
        /// </summary>
        [JsonProperty(PropertyName = "Status")]
        public CashOutRequestStatus Status { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'InProcessOnchain',
        /// 'SettledOnchain', 'InProcessOffchain', 'SettledOffchain',
        /// 'SettledNoChain'
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public TransactionStates State { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Amount")]
        public double Amount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DateTime")]
        public System.DateTime DateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsHidden")]
        public bool IsHidden { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "StatusVal")]
        public int StatusVal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "StateVal")]
        public int StateVal { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Unknown', 'High', 'Low'
        /// </summary>
        [JsonProperty(PropertyName = "VolumeSize")]
        public CashOutVolumeSize VolumeSize { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "VolumeText")]
        public string VolumeText { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PreviousId")]
        public string PreviousId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "FeeSize")]
        public double FeeSize { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Unknown', 'Absolute',
        /// 'Relative'
        /// </summary>
        [JsonProperty(PropertyName = "FeeType")]
        public FeeType FeeType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "FeeTypeText")]
        public string FeeTypeText { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PartitionKey")]
        public string PartitionKey { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RowKey")]
        public string RowKey { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Timestamp")]
        public System.DateTime Timestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ETag")]
        public string ETag { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ClientId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ClientId");
            }
            if (AssetId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AssetId");
            }
            if (PaymentSystem == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PaymentSystem");
            }
            if (PaymentFields == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PaymentFields");
            }
            if (BlockchainHash == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BlockchainHash");
            }
            if (TradeSystem == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TradeSystem");
            }
            if (AccountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccountId");
            }
            if (VolumeText == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VolumeText");
            }
            if (PreviousId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PreviousId");
            }
            if (FeeTypeText == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FeeTypeText");
            }
            if (PartitionKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PartitionKey");
            }
            if (RowKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RowKey");
            }
            if (ETag == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ETag");
            }
        }
    }
}
