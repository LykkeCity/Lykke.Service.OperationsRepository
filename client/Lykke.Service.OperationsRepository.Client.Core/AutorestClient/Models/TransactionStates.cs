// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.OperationsRepository.AutorestClient.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for TransactionStates.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum TransactionStates
    {
        [EnumMember(Value = "InProcessOnchain")]
        InProcessOnchain,
        [EnumMember(Value = "SettledOnchain")]
        SettledOnchain,
        [EnumMember(Value = "InProcessOffchain")]
        InProcessOffchain,
        [EnumMember(Value = "SettledOffchain")]
        SettledOffchain,
        [EnumMember(Value = "SettledNoChain")]
        SettledNoChain
    }
    internal static class TransactionStatesEnumExtension
    {
        internal static string ToSerializedValue(this TransactionStates? value)
        {
            return value == null ? null : ((TransactionStates)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this TransactionStates value)
        {
            switch( value )
            {
                case TransactionStates.InProcessOnchain:
                    return "InProcessOnchain";
                case TransactionStates.SettledOnchain:
                    return "SettledOnchain";
                case TransactionStates.InProcessOffchain:
                    return "InProcessOffchain";
                case TransactionStates.SettledOffchain:
                    return "SettledOffchain";
                case TransactionStates.SettledNoChain:
                    return "SettledNoChain";
            }
            return null;
        }

        internal static TransactionStates? ParseTransactionStates(this string value)
        {
            switch( value )
            {
                case "InProcessOnchain":
                    return TransactionStates.InProcessOnchain;
                case "SettledOnchain":
                    return TransactionStates.SettledOnchain;
                case "InProcessOffchain":
                    return TransactionStates.InProcessOffchain;
                case "SettledOffchain":
                    return TransactionStates.SettledOffchain;
                case "SettledNoChain":
                    return TransactionStates.SettledNoChain;
            }
            return null;
        }
    }
}
