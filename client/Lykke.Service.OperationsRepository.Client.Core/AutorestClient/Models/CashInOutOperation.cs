// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.OperationsRepository.AutorestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class CashInOutOperation
    {
        /// <summary>
        /// Initializes a new instance of the CashInOutOperation class.
        /// </summary>
        public CashInOutOperation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CashInOutOperation class.
        /// </summary>
        /// <param name="state">Possible values include: 'InProcessOnchain',
        /// 'SettledOnchain', 'InProcessOffchain', 'SettledOffchain',
        /// 'SettledNoChain'</param>
        /// <param name="type">Possible values include: 'None',
        /// 'ForwardCashOut', 'ForwardCashIn'</param>
        /// <param name="feeType">Possible values include: 'Unknown',
        /// 'Absolute', 'Relative'</param>
        public CashInOutOperation(string id, System.DateTime dateTime, bool isHidden, string assetId, string clientId, double amount, string blockChainHash, string multisig, string transactionId, string addressFrom, string addressTo, bool isSettled, TransactionStates state, bool isRefund, CashOperationType type, double feeSize, FeeType feeType)
        {
            Id = id;
            DateTime = dateTime;
            IsHidden = isHidden;
            AssetId = assetId;
            ClientId = clientId;
            Amount = amount;
            BlockChainHash = blockChainHash;
            Multisig = multisig;
            TransactionId = transactionId;
            AddressFrom = addressFrom;
            AddressTo = addressTo;
            IsSettled = isSettled;
            State = state;
            IsRefund = isRefund;
            Type = type;
            FeeSize = feeSize;
            FeeType = feeType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DateTime")]
        public System.DateTime DateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsHidden")]
        public bool IsHidden { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AssetId")]
        public string AssetId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ClientId")]
        public string ClientId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Amount")]
        public double Amount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockChainHash")]
        public string BlockChainHash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Multisig")]
        public string Multisig { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TransactionId")]
        public string TransactionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AddressFrom")]
        public string AddressFrom { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AddressTo")]
        public string AddressTo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsSettled")]
        public bool IsSettled { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'InProcessOnchain',
        /// 'SettledOnchain', 'InProcessOffchain', 'SettledOffchain',
        /// 'SettledNoChain'
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public TransactionStates State { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsRefund")]
        public bool IsRefund { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'None', 'ForwardCashOut',
        /// 'ForwardCashIn'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public CashOperationType Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "FeeSize")]
        public double FeeSize { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Unknown', 'Absolute',
        /// 'Relative'
        /// </summary>
        [JsonProperty(PropertyName = "FeeType")]
        public FeeType FeeType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (AssetId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AssetId");
            }
            if (ClientId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ClientId");
            }
            if (BlockChainHash == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BlockChainHash");
            }
            if (Multisig == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Multisig");
            }
            if (TransactionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TransactionId");
            }
            if (AddressFrom == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AddressFrom");
            }
            if (AddressTo == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AddressTo");
            }
        }
    }
}
