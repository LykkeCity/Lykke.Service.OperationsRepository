// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.OperationsRepository.AutorestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LimitTradeEvents.
    /// </summary>
    public static partial class LimitTradeEventsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// Possible values include: 'Buy', 'Sell'
            /// </param>
            /// <param name='volume'>
            /// </param>
            /// <param name='price'>
            /// </param>
            /// <param name='status'>
            /// Possible values include: 'InOrderBook', 'Processing', 'Matched',
            /// 'NotEnoughFunds', 'ReservedVolumeGreaterThanBalance', 'NoLiquidity',
            /// 'UnknownAsset', 'Dust', 'Cancelled', 'LeadToNegativeSpread'
            /// </param>
            /// <param name='dateTime'>
            /// </param>
            /// <param name='orderId'>
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='assetPair'>
            /// </param>
            public static object CreateEvent(this ILimitTradeEvents operations, OrderType type, double volume, double price, OrderStatus status, System.DateTime dateTime, string orderId = default(string), string clientId = default(string), string assetId = default(string), string assetPair = default(string))
            {
                return operations.CreateEventAsync(type, volume, price, status, dateTime, orderId, clientId, assetId, assetPair).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// Possible values include: 'Buy', 'Sell'
            /// </param>
            /// <param name='volume'>
            /// </param>
            /// <param name='price'>
            /// </param>
            /// <param name='status'>
            /// Possible values include: 'InOrderBook', 'Processing', 'Matched',
            /// 'NotEnoughFunds', 'ReservedVolumeGreaterThanBalance', 'NoLiquidity',
            /// 'UnknownAsset', 'Dust', 'Cancelled', 'LeadToNegativeSpread'
            /// </param>
            /// <param name='dateTime'>
            /// </param>
            /// <param name='orderId'>
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='assetPair'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateEventAsync(this ILimitTradeEvents operations, OrderType type, double volume, double price, OrderStatus status, System.DateTime dateTime, string orderId = default(string), string clientId = default(string), string assetId = default(string), string assetPair = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEventWithHttpMessagesAsync(type, volume, price, status, dateTime, orderId, clientId, assetId, assetPair, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            public static object GetEvents(this ILimitTradeEvents operations, string clientId)
            {
                return operations.GetEventsAsync(clientId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetEventsAsync(this ILimitTradeEvents operations, string clientId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventsWithHttpMessagesAsync(clientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
