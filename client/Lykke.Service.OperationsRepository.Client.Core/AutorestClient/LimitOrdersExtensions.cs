// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.OperationsRepository.AutorestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LimitOrders.
    /// </summary>
    public static partial class LimitOrdersExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='order'>
            /// </param>
            public static object AddOrder(this ILimitOrders operations, LimitOrderCreateRequest order = default(LimitOrderCreateRequest))
            {
                return operations.AddOrderAsync(order).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='order'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddOrderAsync(this ILimitOrders operations, LimitOrderCreateRequest order = default(LimitOrderCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddOrderWithHttpMessagesAsync(order, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='orderId'>
            /// </param>
            public static object CancelOrder(this ILimitOrders operations, string clientId, string orderId)
            {
                return operations.CancelOrderAsync(clientId, orderId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='orderId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CancelOrderAsync(this ILimitOrders operations, string clientId, string orderId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelOrderWithHttpMessagesAsync(clientId, orderId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ErrorResponse CancelMultipleOrders(this ILimitOrders operations, string clientId, LimitOrderCancelMultipleRequest model = default(LimitOrderCancelMultipleRequest))
            {
                return operations.CancelMultipleOrdersAsync(clientId, model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> CancelMultipleOrdersAsync(this ILimitOrders operations, string clientId, LimitOrderCancelMultipleRequest model = default(LimitOrderCancelMultipleRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelMultipleOrdersWithHttpMessagesAsync(clientId, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='orderId'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object FinalizeOrder(this ILimitOrders operations, string clientId, string orderId, LimitOrderFinalizeRequest model = default(LimitOrderFinalizeRequest))
            {
                return operations.FinalizeOrderAsync(clientId, orderId, model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='orderId'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> FinalizeOrderAsync(this ILimitOrders operations, string clientId, string orderId, LimitOrderFinalizeRequest model = default(LimitOrderFinalizeRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FinalizeOrderWithHttpMessagesAsync(clientId, orderId, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='orderId'>
            /// </param>
            public static ErrorResponse RemoveOrder(this ILimitOrders operations, string clientId, string orderId)
            {
                return operations.RemoveOrderAsync(clientId, orderId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='orderId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> RemoveOrderAsync(this ILimitOrders operations, string clientId, string orderId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveOrderWithHttpMessagesAsync(clientId, orderId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='orderId'>
            /// </param>
            public static object GetOrderById(this ILimitOrders operations, string clientId, string orderId)
            {
                return operations.GetOrderByIdAsync(clientId, orderId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='orderId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetOrderByIdAsync(this ILimitOrders operations, string clientId, string orderId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrderByIdWithHttpMessagesAsync(clientId, orderId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            public static object GetOrdersByClientId(this ILimitOrders operations, string clientId)
            {
                return operations.GetOrdersByClientIdAsync(clientId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetOrdersByClientIdAsync(this ILimitOrders operations, string clientId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOrdersByClientIdWithHttpMessagesAsync(clientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            public static object GetActiveOrdersByClientId(this ILimitOrders operations, string clientId)
            {
                return operations.GetActiveOrdersByClientIdAsync(clientId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetActiveOrdersByClientIdAsync(this ILimitOrders operations, string clientId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActiveOrdersByClientIdWithHttpMessagesAsync(clientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
