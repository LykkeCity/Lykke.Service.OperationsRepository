// Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Lykke.Service.OperationsRepository.AutorestClient.Models
{
    using Lykke.Service;
    using Lykke.Service.OperationsRepository;
    using Lykke.Service.OperationsRepository.AutorestClient;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ITransferEvent
    {
        /// <summary>
        /// Initializes a new instance of the ITransferEvent class.
        /// </summary>
        public ITransferEvent()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ITransferEvent class.
        /// </summary>
        /// <param name="state">Possible values include: 'InProcessOnchain',
        /// 'SettledOnchain', 'InProcessOffchain', 'SettledOffchain',
        /// 'SettledNoChain'</param>
        public ITransferEvent(string fromId = default(string), string blockChainHash = default(string), string multisig = default(string), string transactionId = default(string), string addressFrom = default(string), string addressTo = default(string), bool? isSettled = default(bool?), TransactionStates? state = default(TransactionStates?), string id = default(string), string assetId = default(string), string clientId = default(string), double? amount = default(double?), System.DateTime? dateTime = default(System.DateTime?), bool? isHidden = default(bool?))
        {
            FromId = fromId;
            BlockChainHash = blockChainHash;
            Multisig = multisig;
            TransactionId = transactionId;
            AddressFrom = addressFrom;
            AddressTo = addressTo;
            IsSettled = isSettled;
            State = state;
            Id = id;
            AssetId = assetId;
            ClientId = clientId;
            Amount = amount;
            DateTime = dateTime;
            IsHidden = isHidden;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "FromId")]
        public string FromId { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockChainHash")]
        public string BlockChainHash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Multisig")]
        public string Multisig { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TransactionId")]
        public string TransactionId { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AddressFrom")]
        public string AddressFrom { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AddressTo")]
        public string AddressTo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsSettled")]
        public bool? IsSettled { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'InProcessOnchain',
        /// 'SettledOnchain', 'InProcessOffchain', 'SettledOffchain',
        /// 'SettledNoChain'
        /// </summary>
        [JsonProperty(PropertyName = "State")]
        public TransactionStates? State { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AssetId")]
        public string AssetId { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ClientId")]
        public string ClientId { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Amount")]
        public double? Amount { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DateTime")]
        public System.DateTime? DateTime { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsHidden")]
        public bool? IsHidden { get; private set; }

    }
}
