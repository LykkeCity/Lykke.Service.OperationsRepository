// Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Lykke.Service.OperationsRepository.AutorestClient
{
    using Models;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TransferOperations.
    /// </summary>
    public static partial class TransferOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transferEvent'>
            /// </param>
            public static object Register(this ITransferOperations operations, TransferEvent transferEvent = default(TransferEvent))
            {
                return operations.RegisterAsync(transferEvent).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transferEvent'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RegisterAsync(this ITransferOperations operations, TransferEvent transferEvent = default(TransferEvent), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterWithHttpMessagesAsync(transferEvent, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            public static object Get(this ITransferOperations operations, string clientId = default(string))
            {
                return operations.GetAsync(clientId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this ITransferOperations operations, string clientId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(clientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetByRecordId(this ITransferOperations operations, string clientId = default(string), string id = default(string))
            {
                return operations.GetByRecordIdAsync(clientId, id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByRecordIdAsync(this ITransferOperations operations, string clientId = default(string), string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByRecordIdWithHttpMessagesAsync(clientId, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='blockChainHash'>
            /// </param>
            public static ErrorResponse UpdateBlockchainHash(this ITransferOperations operations, string clientId = default(string), string id = default(string), string blockChainHash = default(string))
            {
                return operations.UpdateBlockchainHashAsync(clientId, id, blockChainHash).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='blockChainHash'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> UpdateBlockchainHashAsync(this ITransferOperations operations, string clientId = default(string), string id = default(string), string blockChainHash = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateBlockchainHashWithHttpMessagesAsync(clientId, id, blockChainHash, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='btcTransaction'>
            /// </param>
            public static ErrorResponse SetBtcTransaction(this ITransferOperations operations, string clientId = default(string), string id = default(string), string btcTransaction = default(string))
            {
                return operations.SetBtcTransactionAsync(clientId, id, btcTransaction).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='btcTransaction'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> SetBtcTransactionAsync(this ITransferOperations operations, string clientId = default(string), string id = default(string), string btcTransaction = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetBtcTransactionWithHttpMessagesAsync(clientId, id, btcTransaction, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='offchain'>
            /// </param>
            public static ErrorResponse SetIsSettledIfExists(this ITransferOperations operations, string clientId = default(string), string id = default(string), bool? offchain = default(bool?))
            {
                return operations.SetIsSettledIfExistsAsync(clientId, id, offchain).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='offchain'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> SetIsSettledIfExistsAsync(this ITransferOperations operations, string clientId = default(string), string id = default(string), bool? offchain = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetIsSettledIfExistsWithHttpMessagesAsync(clientId, id, offchain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockchainHash'>
            /// </param>
            public static object GetByHash(this ITransferOperations operations, string blockchainHash = default(string))
            {
                return operations.GetByHashAsync(blockchainHash).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockchainHash'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByHashAsync(this ITransferOperations operations, string blockchainHash = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByHashWithHttpMessagesAsync(blockchainHash, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='multisig'>
            /// </param>
            public static object GetByMultisig(this ITransferOperations operations, string multisig = default(string))
            {
                return operations.GetByMultisigAsync(multisig).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='multisig'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByMultisigAsync(this ITransferOperations operations, string multisig = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByMultisigWithHttpMessagesAsync(multisig, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='multisigs'>
            /// </param>
            public static object GetByMultisigs(this ITransferOperations operations, IList<string> multisigs = default(IList<string>))
            {
                return operations.GetByMultisigsAsync(multisigs).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='multisigs'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByMultisigsAsync(this ITransferOperations operations, IList<string> multisigs = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByMultisigsWithHttpMessagesAsync(multisigs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
